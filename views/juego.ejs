<%- include('layout.ejs'); %>
<!-- RECIBIMOS LOS DOS ARRAYS DE NODE (users y salas) Y LAS VARIABLES name, imagen-->
<div class="container mt-4">

    <div class="mt-8 p-2 bg-primary text-white rounded d-inline-flex">
        <h2>Hola <%= user.name %></h2>
        <img src="<%= user.imagen %>" name="avatar" id="avatar" alt="avatar" width="60px">
    </div>

    <div id="usuarios" class="container p-3 my-3 border ">
        <!--<div id="userConnected" class="container p-1 my-3 bg-dark text-white"></div>-->
        <div id="usuarios-row" class="row" >
            <h4>Usuarios conectados</h4>
            <!--<% //usersConnected.forEach(function(user){ %>-->
                <div id="conectados" class="col" draggable="true" ondragstart="return dragStart(event)">
                    <!--<div class="display: contents; position: absolute;"-->
                        <img id="<%= user.id %>" src="<%= user.imagen %>" name="<%= user.username %>" alt="avatar" width="80px"
                             draggable="true">
                        <!--<p style="margin-bottom: 0.2rem"><%= user.name %></p>-->
                        <!--</div>-->
                </div>
            <!--<% //}); %>-->
        </div>
    </div>
    <div class="container text-center">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-4">


        <!--<div id="salas" class="container p-3 my-3 border ">-->
            <!--<div id="salas-row" class="row" >-->
            <% salas.forEach(function(sala){ %>
          <div class="col" >
                    <p style="margin-bottom: 0.2rem"><%= sala.name %></p>
                    <div class="progress barras simulacion">
                        <!-- las barras van del 0-50%. width (porcentaje)=casillas-click/16/2-->
                        <div id="<%= sala.id %>-s-0" class="progress-bar" role="progressbar" style="width: 50%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                        <div id="<%= sala.id %>-s-1" class="progress-bar" role="progressbar" style="width: 50%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
            <div class="sala" id="<%= sala.name %>"

                         ondragenter="return dragEnter(event)"
                         ondrop="return dragDrop(event)"
                         ondragover="return dragOver(event)">
            </div>
                    <div class="progress barras">
                        <!-- las barras van del 0-50%. width (porcentaje)=casillas-click/16/2-->
                        <div id="<%= sala.id %>-0" class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                        <div id="<%= sala.id %>-1"class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>

                    <div class="divBoard" id = "divBoard<%= sala.id %>"></div>
           </div>
            <% }); %>
        </div>
    </div>


    <!-- TABLA INFERIOR PARA INDICAR LAS SUCESIVAS ASIGNACIONES DE usuario a sala de juego-->
    <div id="items" hidden="hidden" class="container p-3 my-3 bg-dark text-white">
        <span><button style="float:right" id="btnClearStorage" value="borrarDatos">borrar Datos</button>
        <h4 id="estado">Usuarios asignados a salas</h4></span>
        <table id="tablaItems"></table>
    </div>
</div>

<script>
    // get the server URL from the window.location:
    // change 'wss' to 'ws' for running without SSL):
    let serverURL = 'wss://' + window.location.hostname+':8443';
    // window.location.host contiene localhost:4111
    // the webSocket connection:
    let ws;
    //let idSala = null;
    let playerColor = null; // necesario
    //let users=[];
    users=JSON.parse('<%- JSON.stringify(users) %>');
    let idJugador=JSON.parse('<%- JSON.stringify(user.id) %>');

    //let ws = new WebSocket("ws://localhost:9090"); // FUNCIONA BIEN EN LOCAL
    //let ws = new WebSocket("wss://game-mvc-node-socket.onrender.com");

    // Venimos aquí con login. Le decimos al server que estamos.
    /*ws.addEventListener("open", (ev) => {
        console.log("Jugador id Set successfully " + idJugador);
        const payLoad = { "method": "connect", "idJugador": idJugador }
        ws.send(JSON.stringify(payLoad));
    });*/
    // SI EXISTE EN EL LS Y HAY MENOS DE DOS se muestra en su sala,
    // SI NO EN CONECTADO
    //mostrarItemDeLS(idJugador, response.jugadoresPorSala);
    /*ws.onmessage = message => {
        //message.data
        const response = JSON.parse(message.data);
        //disjoin
        if (response.method === "disjoin") {
            let partida=response.partida;
            quitarAvatar(response.clientAQuitar,partida.id);
            // borra todos sus botones
            borrarTablero(partida);
            //document.getElementById("divboard"+partida.id).remove();
            // vuelve a dibujarlos
            //dibujaTablero(partida);
            actualizaBarra(partida.id,0,0);
            actualizaBarra(partida.id,1,0);
            document.getElementById(idJugador).style.border="";

            /!* si no está en usuarios locales y se acababa de registrar no puede seguir en LS
            porque no se almacena en users.js (servidor)
            Mal truco,: los nuevos registrados se identifican por su color empiez por #....
            * *!/
            let user=users.find(u=>u.id===Number(response.clientAQuitar));
            if (user.color.substr(0,1)==='#')
             deleteItem(response.clientAQuitar);
        }

        //join
        // PONE SU COLOR Y DIBUJAR TABLERO
        // CREA EVENTOS PLAY
        if (response.method === "join"){
            const partida = response.partida;
            idJugador=response.idJugador;
            //si pongo esto usa siempre el último usuario
            // const clientId=response.clientId;
            // ojo con las variables.....clientId es global

            partida.jugadores.forEach (c => {
                // A ESTE JUGADOR LE ASIGNA COLOR
                if (c.id === idJugador) playerColor = c.color;
            });
            // borra todos sus botones
            borrarTablero(partida)
            // vuelve a dibujarlos
            dibujaTablero(partida)
        }
        //updateAvatar
        if (response.method === "updateAvatar") {
            idJugador = response.idJugador;
            //idContrario=response.idContrario
            console.log("updateAvatar set successfully " + idJugador)
            //
            crearAvatardelContrarioEnSala(idJugador,response.idSala);
        }
        //updateAvatar
        if (response.method === "updateAvatarEnConectados") {
            idJugador = response.idJugador;
            console.log("updateAvatar en conectados " + idJugador)
            //
            updateAvatarEnConectados(idJugador);
        }
        if (response.method === "getAvatarJugador") {
            console.log("getAvatarJugador en sala correspondiente " + idJugador)
            mostrarEnSala(response.idJugador,response.idSala);
        }
        // entra a jugar a la sala, sale de su barra de conectados don Drag&drop y el resto de usuarios
        // debe saberlo para borrarlo también
        if (response.method === "borraMiAvatarEnRestoConectados") {
            idJugador = response.idJugador;
            console.log("borra avatar del " + idJugador+ " en las otra ventanas conectadas")
            if (document.getElementById(idJugador) !=null) {
                let node = document.getElementById(idJugador);
                // borrar esto: <img id="1" src="./images/avatar1.jpg" ...
                document.getElementById("conectados").removeChild(node);
            }
        }
        //update BOLAS
        if (response.method === "update") {
            //{1=> "red", 1} ojo no admite Map
            const estados=response.estados;
            if (!estados) return;
            for(const key of Object.keys(estados)) {
                const ballObject = document.getElementById("ball" + key);
                ballObject.style.backgroundColor = estados[key];
            }
        }
        //newPoint
        if (response.method === "newPoint") {
            // no quiero al idJugador, todas las barras llevan 0 y 1
            let pb=document.getElementById(String(response.idSala)+'-'+response.index);
            let pbs=document.getElementById(String(response.idSala)+'-s-'+response.index);
            let length = pb.style.width.length;
            let porcentaje = Number(pb.style.width.substr(0, length - 1));
            pb.style.width = String(porcentaje + 100 / 16 ) + "%";


            pb.style.backgroundColor=response.color;
            pbs.style.backgroundColor=response.color;


        }
        //win
        if (response.method === "win"){
            const idJugador = response.idJugador;
            document.getElementById(idJugador).style.border="6px dotted #00ff00";
            let user=users.find(u=>u.id===Number(idJugador));
            alert("Gana el jugador: ("+user.id+") "+user.name);
        }
    }*/
    /*ws.onclose = function(event) {
        if (event.wasClean) {
            alert(`[close] Conexión cerrada limpiamente, código=${event.code} motivo=${event.reason}`);
        } else {
            // ej. El proceso del servidor se detuvo o la red está caída
            // event.code es usualmente 1006 en este caso
            alert('[close] La conexión se cayó');
        }
    };*/
    /*ws.onerror = function(error) {
        alert(`[error]`);
    };*/
    function borrarTablero(partida) {
    const dB=document.getElementById("divBoard"+partida.id);
    // borra todos sus botones
    while(dB.firstChild)
        dB.removeChild (dB.firstChild)
}
    function dibujaTablero(partida) {
    const dB=document.getElementById("divBoard"+partida.id);

    // vuelve a dibujarlos
    for (let i = 0; i < partida.balls; i++){
        const b = document.createElement("button");
        b.id = "ball" + (i);
        b.tag = i
        //b.textContent = i+1
        b.style.width = "50px"
        b.style.height = "50px"
        b.style.background = "#ffffff"
        b.addEventListener("click", e => {
            //if (partida.jugadores.length===2){
                b.style.background = playerColor
                const payLoad = {
                    "method": "play",
                    "idJugador": idJugador,
                    "idSala": partida.id,
                    "idBall": b.tag,
                    "color": playerColor
                }
                ws.send(JSON.stringify(payLoad))
            //}
        })
        dB.appendChild(b);
    }
}
    function actualizaBarra(idSala,index, valor) {
        let pb=document.getElementById(String(idSala)+'-'+index);
        let pbs=document.getElementById(String(idSala)+'-s-'+index);
        pb.style.width = String(valor)+"%";
    }

    function setup() {
        // open the socket:
        ws = new WebSocket(serverURL);
        ws.addEventListener('open', openConnection);
        ws.addEventListener('close', closeConnection);
        ws.addEventListener('message', readIncomingMessage);
    }
    function openSocket(url) {

    }
    function openConnection() {
        console.log("Jugador id Set successfully " + idJugador);
        const payLoad = { "method": "connect", "idJugador": idJugador }
        ws.send(JSON.stringify(payLoad));
    }
    function closeConnection(event) {
        if (event.wasClean) {
            alert(`[close] Conexión cerrada limpiamente, código=${event.code} motivo=${event.reason}`);
        } else {
            // ej. El proceso del servidor se detuvo o la red está caída
            // event.code es usualmente 1006 en este caso
            alert('[close] La conexión se cayó');
        }
    }
    function readIncomingMessage(message) {
        //message.data
        const response = JSON.parse(message.data);
        //disjoin
        if (response.method === "disjoin") {
            let partida=response.partida;
            quitarAvatar(response.clientAQuitar,partida.id);
            // borra todos sus botones
            borrarTablero(partida);
            //document.getElementById("divboard"+partida.id).remove();
            // vuelve a dibujarlos
            //dibujaTablero(partida);
            actualizaBarra(partida.id,0,0);
            actualizaBarra(partida.id,1,0);
            document.getElementById(idJugador).style.border="";

            /* si no está en usuarios locales y se acababa de registrar no puede seguir en LS
            porque no se almacena en users.js (servidor)
            Mal truco,: los nuevos registrados se identifican por su color empiez por #....
            * */
            let user=users.find(u=>u.id===Number(response.clientAQuitar));
            if (user.color.substr(0,1)==='#')
                deleteItem(response.clientAQuitar);
        }
        //join
        // PONE SU COLOR Y DIBUJAR TABLERO
        // CREA EVENTOS PLAY
        if (response.method === "join"){
            const partida = response.partida;
            idJugador=response.idJugador;
            //si pongo esto usa siempre el último usuario
            // const clientId=response.clientId;
            // ojo con las variables.....clientId es global

            partida.jugadores.forEach (c => {
                // A ESTE JUGADOR LE ASIGNA COLOR
                if (c.id === idJugador) playerColor = c.color;
            });
            // borra todos sus botones
            borrarTablero(partida)
            // vuelve a dibujarlos
            dibujaTablero(partida)
        }
        //updateAvatar
        if (response.method === "updateAvatar") {
            idJugador = response.idJugador;
            //idContrario=response.idContrario
            console.log("updateAvatar set successfully " + idJugador)
            //
            crearAvatardelContrarioEnSala(idJugador,response.idSala);
        }
        //updateAvatar
        if (response.method === "updateAvatarEnConectados") {
            idJugador = response.idJugador;
            console.log("updateAvatar en conectados " + idJugador)
            //
            updateAvatarEnConectados(idJugador);
        }
        if (response.method === "getAvatarJugador") {
            console.log("getAvatarJugador en sala correspondiente " + idJugador)
            mostrarEnSala(response.idJugador,response.idSala);
        }
        // entra a jugar a la sala, sale de su barra de conectados don Drag&drop y el resto de usuarios
        // debe saberlo para borrarlo también
        if (response.method === "borraMiAvatarEnRestoConectados") {
            idJugador = response.idJugador;
            console.log("borra avatar del " + idJugador+ " en las otra ventanas conectadas")
            if (document.getElementById(idJugador) !=null) {
                let node = document.getElementById(idJugador);
                // borrar esto: <img id="1" src="./images/avatar1.jpg" ...
                document.getElementById("conectados").removeChild(node);
            }
        }
        //update BOLAS
        if (response.method === "update") {
            //{1=> "red", 1} ojo no admite Map
            const estados=response.estados;
            if (!estados) return;
            for(const key of Object.keys(estados)) {
                const ballObject = document.getElementById("ball" + key);
                ballObject.style.backgroundColor = estados[key];
            }
        }
        //newPoint
        if (response.method === "newPoint") {
            // no quiero al idJugador, todas las barras llevan 0 y 1
            let pb=document.getElementById(String(response.idSala)+'-'+response.index);
            let pbs=document.getElementById(String(response.idSala)+'-s-'+response.index);
            let length = pb.style.width.length;
            let porcentaje = Number(pb.style.width.substr(0, length - 1));
            pb.style.width = String(porcentaje + 100 / 16 ) + "%";


            pb.style.backgroundColor=response.color;
            pbs.style.backgroundColor=response.color;


        }
        //win
        if (response.method === "win"){
            const idJugador = response.idJugador;
            document.getElementById(idJugador).style.border="6px dotted #00ff00";
            let user=users.find(u=>u.id===Number(idJugador));
            alert("Gana el jugador: ("+user.id+") "+user.name);
        }
    }

    // add a listener for the page to load:
    window.addEventListener('load', setup);
</script>

<script src="js/dragdrop.js"></script>
<!--<script src="js/localStorage.js"></script>-->
</body>
</html>
